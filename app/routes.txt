from flask import render_template, flash, redirect, url_for, request, jsonify, Response, send_from_directory
from app import app, db
from app.forms import LoginForm, DomainRegistrationForm, UserRegistrationForm, ContractorRegistrationForm, ShortTextPostForm, LongTextPostForm, ImagePostForm, VideoPostForm, SaleForm, GenerateIcaForm
from app.models import Domain, User, FacebookPost, TwitterPost, TumblrPost, RedditPost, YoutubePost, LinkedinPost, Ewok, Sentry, CountryLead, RegionLead, TeamLead, Agent
from flask_login import current_user, login_user, logout_user, login_required
from werkzeug.urls import url_parse
from werkzeug.utils import secure_filename
import logging
from datetime import datetime, date
import uuid
import pdfrw
import os

'''
TO-DO:

    - Finish link_social()
    - Finish link_social.html

    - DOMAIN REGISTRATION
        + Link social networks and store tokens
        + Request time slots
        + User registration (must be linked to domain) (permissions)
    - USER INTERFACE
        + Create
        + Read
        + Update
        + Delete
    - API
        + Read
        + Delete
        + Get creds
    - LOGIN
    - ERROR HANDLING
    - EMAIL SUPPORT
    - ARTICLES AND MARKETING PAGES
    - HELP PAGES AND TUTORIALS
    - SECURITY
        + Domain-level
        + App-level
'''

def make_sentry(user_id, ip_address, endpoint, status_code, status_message):
    activity = Sentry(ip_address=str(ip_address), user_id=int(user_id), endpoint=str(endpoint))
    activity.status_code = int(status_code)
    activity.status_message = str(status_message)
    db.session.add(activity)
    db.session.commit()

def fill_pdf_template(input_path, output_path, data_dict):
    ANNOT_KEY = '/Annots'
    ANNOT_FIELD_KEY = '/T'
    ANNOT_VAL_KEY = '/V'
    ANNOT_RECT_KEY = '/Rect'
    SUBTYPE_KEY = '/Subtype'
    WIDGET_SUBTYPE_KEY = '/Widget'
    template_pdf = pdfrw.PdfReader(input_path)
    annotations = template_pdf.pages[0][ANNOT_KEY]
    for annotation in annotations:
        if annotation[SUBTYPE_KEY] == WIDGET_SUBTYPE_KEY:
            if annotation[ANNOT_FIELD_KEY]:
                key = annotation[ANNOT_FIELD_KEY][1:-1]
                if key in data_dict.keys():
                    annotation.update(
                        pdfrw.PdfDict(AP=data_dict[key], V='{}'.format(data_dict[key]))
                    )
    pdfrw.PdfWriter().write(output_path, template_pdf)

# Post management

# Help

# Sales pathway

@app.route('/legal/user/terms-of-service', methods=['GET'])
def terms_of_service():
    return render_template('legal/terms_of_service.html', title='Terms of Service')

@app.route('/legal/contractor/ica', methods=['GET'])
@login_required
def independent_contractor_agreement():
    if current_user.email != 'neilbolyard@gmail.com':
        flash("You don't have permission to do that.")
        return redirect(url_for('main.dashboard'))
    form = GenerateIcaForm()
    if form.validate_on_submit():
        basedir = os.path.abspath(os.path.dirname(__file__))
        data_dict = {
            'contract_day': datetime.utcnow().strftime('%d'),
            'contract_month': datetime.utcnow().strftime('%B'),
            'contract_year': datetime.utcnow().strftime('%Y'),
            'contractor_name1': '{} {}'.format(str(form.first_name.data), str(form.last_name.data)),
            'client_address1': '6558 S Cook Way',
            'client_address2': 'Centennial, Colorado 80121',
            'contractor_address1': '{}'.format(str(form.street_address.data)),
            'contractor_address2': '{}, {} {}'.format(str(form.city.data), str(form.state.data), str(form.zip_code.data)),
            'contract_date': datetime.utcnow().strftime('%Y-%m-%d'),
            'contractor_name2': '{} {}'.format(str(form.first_name.data), str(form.last_name.data))
        }
        if str(form.contractor_type.data) == 'agent':
            input_path = os.path.join(basedir, 'app', 'static', 'agreements', 'agent_ica.pdf')
            output_path = os.path.join(basedir, 'app', 'static', 'records', 'contracts', '{}_ica.pdf'.format(str(form.last_name.data)))
            fill_pdf_template(input_path=input_path, output_path=output_path, data_dict=data_dict)
        elif str(form.contractor_type.data) == 'team_lead':
            input_path = os.path.join(basedir, 'app', 'static', 'agreements', 'team_lead_ica.pdf')
            output_path = os.path.join(basedir, 'app', 'static', 'records', 'contracts', '{}_ica.pdf'.format(str(form.last_name.data)))
            fill_pdf_template(input_path=input_path, output_path=output_path, data_dict=data_dict)
        elif str(form.contractor_type.data) == 'region_lead':
            input_path = os.path.join(basedir, 'app', 'static', 'agreements', 'region_lead_ica.pdf')
            output_path = os.path.join(basedir, 'app', 'static', 'records', 'contracts', '{}_ica.pdf'.format(str(form.last_name.data)))
            fill_pdf(input_path=input_path, output_path=output_path, data_dict=data_dict)
        return send_from_directory(os.path.join(basedir, 'app', 'static', 'records', 'contracts', '{}_ica.pdf'.format(str(form.last_name.data)))
    return render_template('legal/independent_contractor_agreement.html', title='Generate Independent Contractor Agreement', form=form)
