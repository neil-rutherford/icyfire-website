# USER DASHBOARD
@bp.route('/dashboard', methods=['GET'])
@login_required
def dashboard():
    '''
    - Sentry logs:
        + ENDPOINT: 'main.dashboard'
        + 200 = ok; read access for all posts for all platforms registered to that domain
        + 403 = permission denied; user doesn't have read permission
    - If the user is an IcyFire contractor, then they are directed to the sales dashboard
    '''
    if current_user.icyfire_crta is not None:
        return redirect(url_for('sales.dashboard'))
    if current_user.is_read is False:
        flash("Talk to your domain admin about getting read permissions.")
        make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.dashboard', status_code=403, status_message='Read permission denied.')
        return redirect(url_for('main.dashboard'))
    facebook_queue = FacebookPost.query.filter_by(domain_id=current_user.domain_id).order_by(FacebookPost.timestamp.asc()).all()
    twitter_queue = TwitterPost.query.filter_by(domain_id=current_user.domain_id).order_by(TwitterPost.timestamp.asc()).all()
    tumblr_queue = TumblrPost.query.filter_by(domain_id=current_user.domain_id).order_by(TumblrPost.timestamp.asc()).all()
    reddit_queue = RedditPost.query.filter_by(domain_id=current_user.domain_id).order_by(RedditPost.timestamp.asc()).all()
    youtube_queue = YoutubePost.query.filter_by(domain_id=current_user.domain_id).order_by(YoutubePost.timestamp.asc()).all()
    linkedin_queue = LinkedinPost.query.filter_by(domain_id=current_user.domain_id).order_by(LinkedinPost.timestamp.asc()).all()
    make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.dashboard', status_code=200, status_message='Successful dashboard access.')
    return render_template('main/dashboard.html', facebook_queue=facebook_queue, twitter_queue=twitter_queue, tumblr_queue=tumblr_queue, reddit_queue=reddit_queue, youtube_queue=youtube_queue, linkedin_queue=linkedin_queue)

# SHORT TEXT
if form.is_facebook.data is True:
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_facebook(domain_id=current_user.domain_id, user_id=current_user.id, post_type=1, body=str(form.body.data), link_url=str(form.link_url.data), multimedia_url=None, tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_short_text', status_code=200, status_message='Facebook')
        if form.is_twitter.data is True:
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_twitter(domain_id=current_user.domain_id, user_id=current_user.id, post_type=1, body=str(form.body.data), link_url=str(form.link_url.data), multimedia_url=None, tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_short_text', status_code=200, status_message='Twitter')
        if form.is_tumblr.data is True:
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
            else:
                tags = None
            make_tumblr(domain_id=current_user.domain_id, user_id=current_user.id, post_type=1, title=str(form.title.data), body=str(form.body.data), link_url=str(form.link_url.data), multimedia_url=None, tags=tags, caption=None)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_short_text', status_code=200, status_message='Tumblr')
        if form.is_reddit.data is True:
            make_reddit(domain_id=current_user.domain_id, user_id=current_user.id, post_type=1, title=str(form.title.data), body=str(form.body.data), link_url=str(form.link_url.data), image_url=None, video_url=None)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_short_text', status_code=200, status_message='Reddit')
        if form.is_linkedin.data is True:
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_linkedin(domain_id=current_user.domain_id, user_id=current_user.id, post_type=1, title=str(form.title.data), body=str(form.body.data), caption=None, multimedia_url=None, link_url=str(form.link_url.data), tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_short_text', status_code=200, status_message='LinkedIn')

# LONG TEXT
if form.is_facebook.data is True:
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_facebook(domain_id=current_user.domain_id, user_id=current_user.id, post_type=2, body=str(form.body.data), link_url=str(form.link_url.data), multimedia_url=None, tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_long_text', status_code=200, status_message='Facebook')
        if form.is_tumblr.data is True:
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
            else:
                tags = None
            make_tumblr(domain_id=current_user.domain_id, user_id=current_user.id, post_type=2, title=str(form.title.data), body=str(form.body.data), link_url=str(form.link_url.data), multimedia_url=None, tags=tags, caption=None)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_long_text', status_code=200, status_message='Tumblr')
        if form.is_reddit.data is True:
            make_reddit(domain_id=current_user.domain_id, user_id=current_user.id, post_type=2, title=str(form.title.data), body=str(form.body.data), link_url=str(form.link_url.data), image_url=None, video_url=None)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_long_text', status_code=200, status_message='Reddit')
        if form.is_linkedin.data is True:
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_linkedin(domain_id=current_user.domain_id, user_id=current_user.id, post_type=2, title=str(form.title.data), body=str(form.body.data), caption=None, multimedia_url=None, link_url=str(form.link_url.data), tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_long_text', status_code=200, status_message='LinkedIn')
        flash('Successfully queued!')
        return redirect(url_for('main.dashboard'))
    return render_template('main/create_long_text.html', title='New Long Text Post', form=form)

# IMAGE

        basedir = os.path.abspath(os.path.dirname(__file__))
        image_name = str(uuid.uuid4())
        f = form.image.data
        file_list = str(f.filename).split('.')[-1:]
        for x in file_list:
            file_type = x
        if form.is_facebook.data is True:
            filename = secure_filename('facebook-{}.{}'.format(image_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'images', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_facebook(domain_id=current_user.domain_id, user_id=current_user.id, post_type=3, body=str(form.caption.data), link_url=None, multimedia_url=url_for('main.get_image', filename), tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_image', status_code=200, status_message='Facebook')
        if form.is_twitter.data is True:
            filename = secure_filename('twitter-{}.{}'.format(image_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'images', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_twitter(domain_id=current_user.domain_id, user_id=current_user.id, post_type=3, body=str(form.caption.data), link_url=None, multimedia_url=url_for('main.get_image', filename), tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_image', status_code=200, status_message='Twitter')
        if form.is_tumblr.data is True:
            filename = secure_filename('tumblr-{}.{}'.format(image_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'images', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
            else:
                tags = None
            make_tumblr(domain_id=current_user.domain_id, user_id=current_user.id, post_type=3, title=str(form.title.data), body=None, link_url=None, multimedia_url=url_for('main.get_image', filename), tags=tags, caption=str(form.caption.data))
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_image', status_code=200, status_message='Tumblr')
        if form.is_reddit.data is True:
            filename = secure_filename('reddit-{}.{}'.format(image_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'images', filename))
            make_reddit(domain_id=current_user.domain_id, user_id=current_user.id, post_type=3, title=str(form.title.data), body=str(form.caption.data), link_url=None, image_url=url_for('main.get_image', filename), video_url=None)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_image', status_code=200, status_message='Reddit')
        if form.is_linkedin.data is True:
            filename = secure_filename('linkedin-{}.{}'.format(image_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'images', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_linkedin(domain_id=current_user.domain_id, user_id=current_user.id, post_type=3, title=str(form.title.data), body=None, caption=str(form.caption.data), multimedia_url=url_for('main.get_image', filename), link_url=None, tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_image', status_code=200, status_message='LinkedIn')
        flash('Successfully queued!')
        return redirect(url_for('main.dashboard'))
    return render_template('main/create_image.html', title='New Image Post', form=form)

# VIDEO

        basedir = os.path.abspath(os.path.dirname(__file__))
        video_name = str(uuid.uuid4())
        f = form.video.data
        file_list = str(f.filename).split('.')[-1:]
        for x in file_list:
            file_type = x
        if form.is_facebook.data is True:
            filename = secure_filename('facebook-{}.{}'.format(video_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'videos', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_facebook(domain_id=current_user.domain_id, user_id=current_user.id, post_type=4, body=str(form.caption.data), link_url=None, multimedia_url=url_for('main.get_video', filename), tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_video', status_code=200, status_message='Facebook')
        if form.is_twitter.data is True:
            filename = secure_filename('twitter-{}.{}'.format(video_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'videos', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_twitter(domain_id=current_user.domain_id, user_id=current_user.id, post_type=4, body=str(form.caption.data), link_url=None, multimedia_url=url_for('main.get_video', filename), tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_video', status_code=200, status_message='Twitter')
        if form.is_tumblr.data is True:
            filename = secure_filename('tumblr-{}.{}'.format(video_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'videos', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
            else:
                tags = None
            make_tumblr(domain_id=current_user.domain_id, user_id=current_user.id, post_type=4, title=str(form.title.data), body=None, link_url=None, multimedia_url=url_for('main.get_video', filename), tags=tags, caption=str(form.caption.data))
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_video', status_code=200, status_message='Tumblr')
        if form.is_reddit.data is True:
            filename = secure_filename('reddit-{}.{}'.format(video_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'videos', filename))
            make_reddit(domain_id=current_user.domain_id, user_id=current_user.id, post_type=4, title=str(form.title.data), body=str(form.caption.data), link_url=None, image_url=None, video_url=url_for('main.get_video', filename))
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_video', status_code=200, status_message='Reddit')
        if form.is_youtube.data is True:
            filename = secure_filename('youtube-{}.{}'.format(video_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'videos', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_youtube(domain_id=current_user.domain_id, user_id=current_user.id, multimedia_url=url_for('main.get_video', filename), title=str(form.title.data), caption=str(form.caption.data), tags=tagline, category=int(form.category.data))
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_video', status_code=200, status_message='YouTube')
        if form.is_linkedin.data is True:
            filename = secure_filename('linkedin-{}.{}'.format(video_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'videos', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_linkedin(domain_id=current_user.domain_id, user_id=current_user.id, post_type=4, title=str(form.title.data), body=None, caption=str(form.caption.data), multimedia_url=url_for('main.get_video', filename), link_url=None, tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.create_video', status_code=200, status_message='LinkedIn')
        flash('Successfully queued!')
        return redirect(url_for('main.dashboard'))
    return render_template('main/create_video.html', title='New Video Post', form=form)

# UPDATE SHORT TEXT

        if platform == 'facebook':
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_facebook(domain_id=current_user.domain_id, user_id=current_user.id, post_type=1, body=str(form.body.data), link_url=str(form.link_url.data), multimedia_url=None, tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_short_text', status_code=200, status_message='Facebook|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'twitter':
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_twitter(domain_id=current_user.domain_id, user_id=current_user.id, post_type=1, body=str(form.body.data), link_url=str(form.link_url.data), multimedia_url=None, tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_short_text', status_code=200, status_message='Twitter|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'tumblr':
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
            else:
                tags = None
            make_tumblr(domain_id=current_user.domain_id, user_id=current_user.id, post_type=1, title=str(form.title.data), body=str(form.body.data), link_url=str(form.link_url.data), multimedia_url=None, tags=tags, caption=None)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_short_text', status_code=200, status_message='Tumblr|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'reddit':
            make_reddit(domain_id=current_user.domain_id, user_id=current_user.id, post_type=1, title=str(form.title.data), body=str(form.body.data), link_url=str(form.link_url.data), image_url=None, video_url=None)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_short_text', status_code=200, status_message='Reddit|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'linkedin':
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_linkedin(domain_id=current_user.domain_id, user_id=current_user.id, post_type=1, title=str(form.title.data), body=str(form.body.data), caption=None, multimedia_url=None, link_url=str(form.link_url.data), tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_short_text', status_code=200, status_message='LinkedIn|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))

# UPDATE LONG TEXT

if platform == 'facebook':
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_facebook(domain_id=current_user.domain_id, user_id=current_user.id, post_type=2, body=str(form.body.data), link_url=str(form.link_url.data), multimedia_url=None, tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_long_text', status_code=200, status_message='Facebook|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'tumblr':
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
            else:
                tags = None
            make_tumblr(domain_id=current_user.domain_id, user_id=current_user.id, post_type=2, title=str(form.title.data), body=str(form.body.data), link_url=str(form.link_url.data), multimedia_url=None, tags=tags, caption=None)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_long_text', status_code=200, status_message='Tumblr|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'reddit':
            make_reddit(domain_id=current_user.domain_id, user_id=current_user.id, post_type=2, title=str(form.title.data), body=str(form.body.data), link_url=str(form.link_url.data), image_url=None, video_url=None)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_long_text', status_code=200, status_message='Reddit|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'linkedin':
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_linkedin(domain_id=current_user.domain_id, user_id=current_user.id, post_type=2, title=str(form.title.data), body=str(form.body.data), caption=None, multimedia_url=None, link_url=str(form.link_url.data), tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_long_text', status_code=200, status_message='LinkedIn|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))

# UPDATE IMAGE

        basedir = os.path.abspath(os.path.dirname(__file__))
        image_name = str(uuid.uuid4())
        f = form.image.data
        file_list = str(f.filename).split('.')[-1:]
        for x in file_list:
            file_type = x
        if platform == 'facebook':
            filename = secure_filename('facebook-{}.{}'.format(image_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'images', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_facebook(domain_id=current_user.domain_id, user_id=current_user.id, post_type=3, body=str(form.caption.data), link_url=None, multimedia_url=url_for('main.get_image', filename), tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_image', status_code=200, status_message='Facebook|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'twitter':
            filename = secure_filename('twitter-{}.{}'.format(image_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'images', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_twitter(domain_id=current_user.domain_id, user_id=current_user.id, post_type=3, body=str(form.caption.data), link_url=None, multimedia_url=url_for('main.get_image', filename), tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_image', status_code=200, status_message='Twitter|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'tumblr':
            filename = secure_filename('tumblr-{}.{}'.format(image_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'images', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
            else:
                tags = None
            make_tumblr(domain_id=current_user.domain_id, user_id=current_user.id, post_type=3, title=str(form.title.data), body=None, link_url=None, multimedia_url=url_for('main.get_image', filename), tags=tags, caption=str(form.caption.data))
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_image', status_code=200, status_message='Tumblr|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'reddit':
            filename = secure_filename('reddit-{}.{}'.format(image_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'images', filename))
            make_reddit(domain_id=current_user.domain_id, user_id=current_user.id, post_type=3, title=str(form.title.data), body=str(form.caption.data), link_url=None, image_url=url_for('main.get_image', filename), video_url=None)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_image', status_code=200, status_message='Reddit|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'linkedin':
            filename = secure_filename('linkedin-{}.{}'.format(image_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'images', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_linkedin(domain_id=current_user.domain_id, user_id=current_user.id, post_type=3, title=str(form.title.data), body=None, caption=str(form.caption.data), multimedia_url=url_for('main.get_image', filename), link_url=None, tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_image', status_code=200, status_message='LinkedIn|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))

# UPDATE VIDEO

        basedir = os.path.abspath(os.path.dirname(__file__))
        video_name = str(uuid.uuid4())
        f = form.video.data
        file_list = str(f.filename).split('.')[-1:]
        for x in file_list:
            file_type = x
        if platform == 'facebook':
            filename = secure_filename('facebook-{}.{}'.format(video_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'videos', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_facebook(domain_id=current_user.domain_id, user_id=current_user.id, post_type=4, body=str(form.caption.data), link_url=None, multimedia_url=url_for('main.get_video', filename), tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_video', status_code=200, status_message='Facebook|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'twitter':
            filename = secure_filename('twitter-{}.{}'.format(video_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'videos', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_twitter(domain_id=current_user.domain_id, user_id=current_user.id, post_type=4, body=str(form.caption.data), link_url=None, multimedia_url=url_for('main.get_video', filename), tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_video', status_code=200, status_message='Twitter|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'tumblr':
            filename = secure_filename('tumblr-{}.{}'.format(video_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'videos', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
            else:
                tags = None
            make_tumblr(domain_id=current_user.domain_id, user_id=current_user.id, post_type=4, title=str(form.title.data), body=None, link_url=None, multimedia_url=url_for('main.get_video', filename), tags=tags, caption=str(form.caption.data))
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_video', status_code=200, status_message='Tumblr|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'reddit':
            filename = secure_filename('reddit-{}.{}'.format(video_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'videos', filename))
            make_reddit(domain_id=current_user.domain_id, user_id=current_user.id, post_type=4, title=str(form.title.data), body=str(form.caption.data), link_url=None, image_url=None, video_url=url_for('main.get_video', filename))
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_video', status_code=200, status_message='Reddit|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'youtube':
            filename = secure_filename('youtube-{}.{}'.format(video_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'videos', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_youtube(domain_id=current_user.domain_id, user_id=current_user.id, multimedia_url=url_for('main.get_video', filename), title=str(form.title.data), caption=str(form.caption.data), tags=tagline, category=int(form.category.data))
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_video', status_code=200, status_message='YouTube|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))
        elif platform == 'linkedin':
            filename = secure_filename('linkedin-{}.{}'.format(video_name, file_type))
            f.save(os.path.join(basedir, 'app', 'static', 'assets', 'videos', filename))
            if form.tags.data is not None:
                tags = str(form.tags.data).split(', ')
                tagline = ' #'.join(tags)
                tagline = '#' + tagline
            else:
                tagline = None
            make_linkedin(domain_id=current_user.domain_id, user_id=current_user.id, post_type=4, title=str(form.title.data), body=None, caption=str(form.caption.data), multimedia_url=url_for('main.get_video', filename), link_url=None, tags=tagline)
            make_sentry(user_id=current_user.id, domain_id=current_user.domain_id, ip_address=request.remote_addr, endpoint='main.update_video', status_code=200, status_message='LinkedIn|{}'.format(int(post_id)))
            flash('Successfully edited!')
            return redirect(url_for('main.dashboard'))

# DOWNLOAD IMAGE
@bp.route('/get/image/<filename>', methods=['GET'])
def get_image(filename):
    basedir = os.path.abspath(os.path.dirname(__file__))
    return send_from_directory(os.path.join(basedir, 'app', 'static', 'assets', 'images'), filename, as_attachment=True)

# DOWNLOAD VIDEO
@bp.route('/get/video/<filename>', methods=['GET'])
def get_video(filename):
    basedir = os.path.abspath(os.path.dirname(__file__))
    return send_from_directory(os.path.join(basedir, 'app', 'static', 'assets', 'videos'), filename, as_attachment=True)